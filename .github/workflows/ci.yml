

name: PyPI Package CI/CD                                                      # PyPIパッケージのCI/CDワークフロー名

on:                                                                           # トリガーの設定
  push:                                                                       # - プッシュイベントの場合
    branches:                                                                 # -- 対象ブランチ
      - main                                                                  # --- mainブランチ
      - "release/**"                                                          # --- releaseで始まるブランチ
  pull_request:                                                               # - プルリクエストイベントの場合
    branches:                                                                 # -- 対象ブランチ
      - main                                                                  # --- mainブランチ
      - "release/**"                                                          # --- releaseで始まるブランチ

jobs:                                                                         # ジョブの定義
  test:                                                                       # テストジョブ
    runs-on: ubuntu-latest                                                    # - Ubuntu最新版で実行
    environment: dev
    strategy:
      matrix:
        python-version: ["3.10", "3.11"]                                      # 複数のPythonバージョンでテストを実行
    steps:                                                                    # - ステップの定義
      - uses: actions/checkout@v2                                             # -- リポジトリのチェックアウト（v2）
      - name: Set up Python ${{ matrix.python-version }}                      # -- 指定したバージョンのPythonをセットアップ
        uses: actions/setup-python@v2                                         # --- Python環境のセットアップ（v2）
        with:                                                                 # --- オプション
          python-version: ${{ matrix.python-version }}                        # ---- マトリクスで指定したPythonバージョンを使用
      - name: Install Poetry
        run: |
          pip install poetry                                                  # Poetryをインストール
          poetry config virtualenvs.create false                              # グローバル環境でインストール
      - name: Install dependencies
        run: poetry install --with test,lint                                  # pyproject.tomlに基づいて依存関係をインストール
      - name: Set SPLIT_NUM
        run: echo "SPLIT_NUM=10" >> $GITHUB_ENV                                # pytestを何分割して実行するか(4なら4分割してランダムで1つを実行)
      - name: Generate random index (1 to SPLIT_NUM)
        run: |
          echo "random_index=$(shuf -i 1-$(($SPLIT_NUM)) -n 1)" >> $GITHUB_ENV
      - name: Run pytest(test_minimal.py)
        run: |
          poetry run pytest tests/test_minimal.py
      - name: Run pytest(random)
        run: |
          # pytest全体からランダムで選択したテストを実行
          echo "random_index=$random_index"
          poetry run pytest --splits $SPLIT_NUM --group $random_index --durations-path=.test_durations
        env:                                                                  # --- 環境変数の設定
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}                 # ---- AnthropicのAPIキー（シークレットから取得）
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}                       # ---- GeminiのAPIキー（シークレットから取得）
          GROQ_API_KEY: ${{ secrets.GROQ_API_KEY }}                           # ---- GroqのAPIキー（シークレットから取得）

      # - name: Run test_sample.py                                              # -- test_sample.pyの実行
      #   if: matrix.python-version == '3.11'                                   # --- Python 3.11の場合のみ実行
      #   run: |                                                                # --- 以下のコマンドを実行
      #     pytest tests/test_sample.py                                         # ---- test_sample.pyをpytestで実行
      # - name: Run test_cli.py                                                 # -- test_cli.pyの実行
      #   if: matrix.python-version == '3.11'                                   # --- Python 3.11の場合のみ実行
      #   run: |                                                                # --- 以下のコマンドを実行
      #     pytest tests/test_cli.py                                            # ---- test_cli.pyをpytestで実行
      # - name: Run test_converter.py                                           # -- test_converter.pyの実行
      #   if: matrix.python-version == '3.11'                                   # --- Python 3.11の場合のみ実行
      #   run: |                                                                # --- 以下のコマンドを実行
      #     pytest tests/test_converter.py                                      # ---- test_converter.pyをpytestで実行
  deploy:                                                                     # デプロイジョブ
    needs: test                                                               # - テストジョブが成功した後に実行
    runs-on: ubuntu-latest                                                    # - Ubuntu最新版で実行
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/heads/release/') # - releaseブランチへのプッシュ時のみ実行
    steps:                                                                    # - ステップの定義
      - uses: actions/checkout@v2                                             # -- リポジトリのチェックアウト（v2）
      - name: Set up Python                                                   # -- Pythonのセットアップ
        uses: actions/setup-python@v2                                         # --- Python環境のセットアップ（v2）
        with:                                                                 # --- オプション
          python-version: 3.10                                                 # ---- Python 3.8を使用
      - name: Install dependencies                                            # -- 依存関係のインストール
        run: |                                                                # --- 以下のコマンドを実行
          python -m pip install --upgrade pip                                 # ---- pipのアップグレード
          pip install -e .[dev,test,lint]                                     # ---- 現在のディレクトリを編集可能モードでインストール
      - name: Update version and upload to PyPI                               # -- バージョンの更新とPyPIへのアップロード
        env:                                                                  # --- 環境変数の設定
          PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}                        # ---- PyPIユーザー名（シークレットから取得）
          PYPI_PASSWORD: ${{ secrets.PYPI_PASSWORD }}                        # ---- PyPIパスワード（シークレットから取得）
        run: |                                                                # --- 以下のコマンドを実行
          chmod +x update_and_upload.sh                                       # ---- update_and_upload.shに実行権限を付与
          ./update_and_upload.sh                                              # ---- update_and_upload.shを実行
      - name: Merge release branch to main                                    # -- リリースブランチをmainブランチにマージ
        uses: devmasx/merge-branch@v1.3.1                                     # --- merge-branchアクションを使用（v1.3.1）
        with:                                                                 # --- オプション
          type: now                                                           # ---- 即時マージ
          from_branch: ${{ github.ref }}                                      # ---- マージ元ブランチ（現在のブランチ）
          target_branch: main                                                 # ---- マージ先ブランチ（mainブランチ）
          github_token: ${{ secrets.GITHUB_TOKEN }}                           # ---- GitHubトークン（シークレットから取得）